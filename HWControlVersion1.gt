# Инструкция по по работе с Git 
Git — это набор утилит, которые отслеживают и фиксируют изменения в файлах. С его помощью вы можете сравнивать, анализировать, редактировать, сливать изменения и возвращаться назад к последнему сохранению. ***Этот процесс называется контролем версий***.

>Для чего он нужен? Ну во-первых, чтобы отследить изменения, произошедшие с проектом, со временем. Проще говоря, мы можем посмотреть как менялись файлы программы, на всех этапах разработки и при необходимости вернуться назад и что-то отредактировать.
 
>Во-вторых он чрезвычайно полезен при одновременной работе нескольких специалистов, над одним проектом. Без Гита случится коллапс, когда разработчики, скопировав весь код из главной папки и сделав с ним задуманное, попытаются одновременно вернуть весь код обратно.
## Установка программы Git

Для установки программы:
1. Скачайте программу для своей операционной системы перейдя по ссылке [Git-download.](https://git-scm.com/download)
2. Посмотрите инструкцию по установке Git-а для вашей ОС
* [Для WIN](https://youtu.be/GsG5roSGha0)  
* [Для Linux](https://youtu.be/Wob0W00CjJc)
* [ДЛя Mac OS](https://youtu.be/Wob0W00CjJc)
3. Запустите скачаный файл и следуйте инструкции из просмотренного видео.

## Настройка Git-а

Для того чтобы указывался автор, который создавал commit необходимо пройти регистрацию в git-е, для этого необходимо ввести в терминале 2-е комманды:

 

    Установим имя для вашего пользователя
    Вместо <ваше_имя> надо ввести в ковычках имя автора, например Pushkin
    git config --global user.name "<ваше_имя>"

    По этому же принципу добовляется и email/
    git config --global user.email "адрес_почты"

## Процесс работы с Git
### 1. Создание репозитория

Для этого необходимо в терминале <например программы vs-code> находясь в папке вашего проекта пройти инициализацию при помощи команды:

    git init
После этого в *git* можно добавлять файлы и создавать commit-ы.


### 2. Добавление файлов и создание commit-ов
    при помощи команды git add <имя_файла> добавляется файл в commit
    при помощи команды git commit -m "комментарий" создается commit и добавляется комментарий к нему

### 3. Команды для отображения журнала изменений и перехода по ним

    при помощи команды git log можно посмотреть историю commit-ов 
После выполения этой команды выводится commit-ы с уникалиным ID и указание ветки в которой они находятся

Пример вывода истории commit-ов c ID
***
![Альтернативный текст](example_git_log.jpg)
***
    При помощи команды git checkout осуществляется переход к нужному commit для этого пишется команда с первыми 4мя символами ID

    ####*Например*
        git checkout  d1396

    Далее для перехода в актуальную версию необходимо выполнить команду *git checkout <main>* с указанием ветви.


    
# END
***
# ДЗ №3 к семинару "Введение в контроль версий"


На этом семинаре мы познакомились с *GitHub*.

***GitHub*** - это ~~как я понял~~ облачное хранилище репозиториев.

Для создания аккаунта на GitHub можно воспользоваться [этой ссылкой.](https://github.com/ "Ссылка на GitHub")
***


### Команды изученные на лекции и семинаре

     git clone <адрес клонируемого репозитория> - команда позволяет клонировать внешний репозиторий на наш ПК.

     git push - команда позволяющая отправить версию нашего репозитория на внешний репозиторий. 
                Требует авторизации на внешнем репозитории.
     git pull - команда при помощи которой скачиваем из внешнего репозитория и одновременно сливаем (merge) с нашей версией репозитория
